package utilidades;import java.io.File;import javax.swing.JComponent;import javax.swing.JFrame;import javax.swing.JPanel;import org.jgraph.JGraph;import ventanas.*;import paneles.*;import opciones.*;import conf.*;import cuadros.*;import datos.*;public class FotografoArbol{	OpcionFicherosRecientes ofr;	OpcionTipoGrafico otg;	GestorOpciones gOpciones= new GestorOpciones();		public static boolean gifPila = false; //Indica si vamos a construir animacion gif de la vista de pila		final PanelVentana panelVentana=Ventana.thisventana.getPanelVentana();		String ficheroSalida[]=new String[2];		public FotografoArbol()	{	}			/*		Captura el contenido del panel del árbol 	*/	public void hacerCapturaUnica(JComponent c,int numeroVista)	{		if (Ventana.thisventana.getTraza()!=null)		{			this.ofr=(OpcionFicherosRecientes)gOpciones.getOpcion("OpcionFicherosRecientes",true);			this.otg=(OpcionTipoGrafico)gOpciones.getOpcion("OpcionTipoGrafico",true);						String extensionesImagen[][]=otg.getExtensiones();						String definicionesArchivos[]=new String[3];			definicionesArchivos[0]=Texto.get("ARCHIVO_"+otg.getTipos(false)[0],Conf.idioma);			definicionesArchivos[1]=Texto.get("ARCHIVO_"+otg.getTipos(false)[1],Conf.idioma);			definicionesArchivos[2]=Texto.get("ARCHIVO_"+otg.getTipos(true)[0],Conf.idioma);							ficheroSalida[0]=ofr.getDir();			ficheroSalida=SelecDireccion.cuadroAbrirFichero(								ficheroSalida[0],								Texto.get("CA_GUARDEXPORT1GIF",Conf.idioma),								null,								extensionesImagen,								definicionesArchivos,								0);			// *1* Comprobarmos que el fichero existe			File f=new File(ficheroSalida[0]+ficheroSalida[1]);			if (!f.exists())				hacerCapturaUnica2(c,numeroVista);			else				new CuadroPreguntaSobreescribir (Ventana.thisventana,"1"+numeroVista,this,c);	// null habría que cambiarlo seguramente			}				else			new CuadroError(Ventana.thisventana,Texto.get("ERROR_VISU",Conf.idioma),Texto.get("ERROR_NOVISCAPT",Conf.idioma));	}			public void hacerCapturaUnica2(JComponent c,int numeroVista)	{		// Actualizamos opción de formato gráfico empleado		if (ficheroSalida[1]!=null && ficheroSalida[1].contains("."))		{			otg.setTipoUsado(ficheroSalida[1].substring( ficheroSalida[1].lastIndexOf(".")+1, ficheroSalida[1].length()  ) );			gOpciones.setOpcion(otg,2);		}		if (ficheroSalida[1]!=null)		{			//int []tamPanel=panelVentana.dimPanelPrincipal();			//int []posicPanel=panelVentana.posicPanelPrincipal();			//int []tamPantalla=Conf.getTamanoMonitor();						//final int getX=posicPanel[0];			//final int getY=posicPanel[1];			//final int getW=tamPanel[0];			//		final int getH=tamPanel[1];			//		final int tp0= tamPantalla[0];			//		final int tp1= tamPantalla[1];			if (!ficheroSalida[1].toLowerCase().contains(".gif") &&				!ficheroSalida[1].toLowerCase().contains(".jpg") &&				!ficheroSalida[1].toLowerCase().contains(".jpeg") &&				!ficheroSalida[1].toLowerCase().contains(".png"))				ficheroSalida[1]=ficheroSalida[1]+".png";			// Actualizamos opción de ficheros recientes (para mantener último directorio)			ofr=(OpcionFicherosRecientes)gOpciones.getOpcion("OpcionFicherosRecientes",true);			ofr.setDir(ficheroSalida[0]);			gOpciones.setOpcion(ofr,2);					final String path=ficheroSalida[0]+ficheroSalida[1];				//new Fotografo(getX,getY,getW,getH,tp0,tp1);			//Fotografo.guardarFoto(cf,0);							//Fotografo.foto(0, Fotografo.numFormato(path),path);			Fotografo.guardarFoto(c, Fotografo.numFormato(path),path);			new CuadroInformacion(Ventana.thisventana,Texto.get("INFO_EXPCORRECTT",Conf.idioma),						Texto.get("INFO_EXPCORRECT",Conf.idioma),550,100);		}					}					// --------------------------------	// copiar traza	// reinicializar	// while (no terminada)	//		captura	//		adelantevisible	/*	public void hacerCapturasPasoNUEVO1()	{		// Creamos traza nueva, inicializada		Traza miTraza=Ventana.thisventana.getTraza();		miTraza.nadaVisible();				// Creamos NYP		NombresYPrefijos nyp=new NombresYPrefijos();		String[] nombresMetodos=miTraza.getNombresMetodos();		String prefijos[]=ServiciosString.obtenerPrefijos(nombresMetodos);		for (int i=0; i<nombresMetodos.length; i++)			nyp.add(nombresMetodos[i],prefijos[i]);		ContenedorArbol cc;				Object [] celdas;		int i=0;				while (!miTraza.getRaiz().enteroVisible(true, false))	// cambiar		{			//JFrame f=new JFrame();			try {				PanelArbol pArbol=new PanelArbol(nyp);											String miDireccion="C:\\Documents and Settings\\Administrador\\Mis documentos\\Proyecto\\imagen.gif";				//f.setContentPane(pArbol);				//f.setSize(2500,2500);				//f.setLocation(0,0);					pArbol.updateUI();				//f.setVisible(true);				Fotografo.guardarFoto(pArbol,miDireccion,Fotografo.numFormato(miDireccion),i++);				//f.setVisible(false);				miTraza.siguienteVisible();			} catch (Exception e) {				e.printStackTrace();			}		}			}				public void hacerCapturasPasoNUEVO2(Traza copiaTraza)	{		final Traza traza=copiaTraza;		GestorOpciones gOpciones= new GestorOpciones();		final PanelVentana panelVentana=Ventana.thisventana.getPanelVentana();			if (traza!=null)		{			OpcionFicherosRecientes ofr=(OpcionFicherosRecientes)gOpciones.getOpcion("OpcionFicherosRecientes",true);			OpcionTipoGrafico otg=(OpcionTipoGrafico)gOpciones.getOpcion("OpcionTipoGrafico",true);						String extensionesImagen[][]=otg.getExtensiones();						String definicionesArchivos[]=new String[3];			definicionesArchivos[0]=Texto.get("ARCHIVO_"+otg.getTipos(false)[0],Conf.idioma);			definicionesArchivos[1]=Texto.get("ARCHIVO_"+otg.getTipos(false)[1],Conf.idioma);			definicionesArchivos[2]=Texto.get("ARCHIVO_"+otg.getTipos(true)[0],Conf.idioma);						String ficheroSalida[]=new String[2];			ficheroSalida[0]=ofr.getDir();			ficheroSalida=SelecDireccion.cuadroAbrirFichero(								ficheroSalida[0],								Texto.get("CA_GUARDEXPORTMULTGIF",Conf.idioma),								null,								extensionesImagen,								definicionesArchivos,								0);											// *1* Comprobarmos que el fichero existe			// Actualizamos opción de formato gráfico empleado			if (ficheroSalida[1]!=null && ficheroSalida[1].contains("."))			{				otg.setTipoUsado(ficheroSalida[1].substring( ficheroSalida[1].lastIndexOf(".")+1, ficheroSalida[1].length()  ) );				gOpciones.setOpcion(otg,2);			}											if (ficheroSalida[1]!=null)			{				int []tamPanel=panelVentana.dimPanelPrincipal();				int []posicPanel=panelVentana.posicPanelPrincipal();				int []tamPantalla=Conf.getTamanoMonitor();				final int []tamGrafo=panelVentana.dimGrafoPrincipal();				final int getX=posicPanel[0];				final int getY=posicPanel[1];				final int getW=tamPanel[0];				final int getH=tamPanel[1];				final int tp0= tamPantalla[0];				final int tp1= tamPantalla[1];							//System.out.println("tamPanel     = "+tamPanel[0]+"x"+tamPanel[1]);				//System.out.println("posicPanel   = "+posicPanel[0]+"x"+posicPanel[1]);				//System.out.println("tamPantalla  = "+tamPantalla[0]+"x"+tamPantalla[1]);				//System.out.println("tamGrafo (1) = "+tamGrafo[0]+"x"+tamGrafo[1]);								// Si no tiene extensión, se la ponemos				if (!ficheroSalida[1].toLowerCase().contains(".gif") &&					!ficheroSalida[1].toLowerCase().contains(".jpg") &&					!ficheroSalida[1].toLowerCase().contains(".jpeg") &&					!ficheroSalida[1].toLowerCase().contains(".png"))					ficheroSalida[1]=ficheroSalida[1]+".png";				// Actualizamos opción de ficheros recientes (para mantener último directorio)				ofr=(OpcionFicherosRecientes)gOpciones.getOpcion("OpcionFicherosRecientes",true);				ofr.setDir(ficheroSalida[0]);				gOpciones.setOpcion(ofr,2);								Ventana.thisventana.deshabilitarOpcionesVentana();						final String path=ficheroSalida[0]+ficheroSalida[1].substring(0,ficheroSalida[1].lastIndexOf("."));												// Preparamos datos				NombresYPrefijos nyp=new NombresYPrefijos();				String[] nombresMetodos=Ventana.thisventana.trazaCompleta.getNombresMetodos();				String prefijos[]=ServiciosString.obtenerPrefijos(nombresMetodos);				for (int i=0; i<nombresMetodos.length; i++)					nyp.add(nombresMetodos[i],prefijos[i]);												// Creamos grafo				GraphModel model = new DefaultGraphModel();				GraphLayoutCache view = new GraphLayoutCache(model,new DefaultCellViewFactory());				final JGraph graph = new JGraph(model, view);								final ContenedorArbol cc=new ContenedorArbol(traza.getRaiz(),	graph,nyp,1);				tamGrafo[0]=cc.maximoAncho();		// Sólo es necesario hacerlo una vez				tamGrafo[1]=cc.maximoAlto();			// Sólo es necesario hacerlo una vez				final Object []celdas=cc.getCeldas();				graph.getGraphLayoutCache().insert(celdas);				graph.setBackground(Conf.colorPanel);				//System.out.println("tamGrafo (2) = "+tamGrafo[0]+"x"+tamGrafo[1]);				//System.out.println("VentanaVisualizador.thisventana.isDisplayable()="+VentanaVisualizador.thisventana.isDisplayable());				Ventana.thisventana.add(graph);						new Thread(){					public synchronized void run()					{						if (traza!=null)						{							traza.nadaVisible();						}						//try {wait(550);} catch (java.lang.InterruptedException ie) {}												//panelVentana.refrescarOpciones();												//try {wait(220);} catch (java.lang.InterruptedException ie) {}									//Fotografo.guardarFoto(graph,path,Fotografo.numFormato(path),0);												int numFotos=1;						int numFramesFinalizados=0;												//final Traza tAux=VentanaVisualizador.thisventana.getTraza();						final PanelVentana pvAux=panelVentana;												final BufferedImage frame= new BufferedImage(tamGrafo[0], tamGrafo[1], BufferedImage.TYPE_INT_RGB);						//Image im1 = panelVentana.createImage(tamGrafo[0], tamGrafo[1]);						//panelVentana.paint(im1.getGraphics());						final Graphics2D g = frame.createGraphics();						g.setBackground(Conf.colorC1Entrada);						//g.drawImage(im1, 0, 0, null);												// guardarFoto												// Creamos la imagen desde el componente							// Image img = graph.createImage(	c.getWidth(), c.getHeight()	);																							//Graphics imgG = frame.getGraphics();							//c.paint(imgG);														//BufferedImage bi=new BufferedImage(frame.getWidth(null),frame.getHeight(null),BufferedImage.TYPE_INT_RGB);							//bi.getGraphics().drawImage(frame, 0, 0, null);							//bi.getGraphics().dispose();														// Guardamos la imagen							File f=new File(path+".png");														try {								//	if (tipo==1)								//	ImageIO.write(bi, "GIF", f);								//else if (tipo==2)								//	ImageIO.write(bi, "JPG", f);								//else									ImageIO.write(frame, "PNG", f);														} catch (java.io.IOException ioe) {							}												// guardarFoto						//Fotografo.guardarFoto(panelVentana.getPanelArbol(),path,Fotografo.numFormato(path),numFotos);																																	while (!traza.enteroVisible())						{							final int it=numFramesFinalizados;							new Thread(){								public void run()								{																		Object []celdasThread=celdas;									traza.siguienteVisible();									cc.actualizar();									celdasThread=cc.getCeldas();									graph.getGraphLayoutCache().insert(celdasThread);									//pvAux.refrescarOpciones();																		Image im2 = graph.createImage(tamGrafo[0], tamGrafo[1]);									panelVentana.paint(im2.getGraphics());									g.drawImage(im2, 0, 0, null);																		File f=new File(path+it+".png");									try {										ImageIO.write(frame, "PNG", f);										} catch (Exception exc) {																		}																	}							}.start();						//	try {wait(100);} catch (java.lang.InterruptedException ie) {}							numFotos++;														if (traza.enteroVisible())								numFramesFinalizados++;						}												Ventana.thisventana.habilitarOpcionesVentana();						new CuadroInformacion(Ventana.thisventana,Texto.get("INFO_EXPCORRECTT",Conf.idioma),							Texto.get("INFO_EXPCORRECT",Conf.idioma),550,100);					}				}.start();			}		}		else			new CuadroError(Ventana.thisventana,Texto.get("ERROR_VISU",Conf.idioma),Texto.get("ERROR_NOVISCAPT",Conf.idioma));	}*/			// --------------------------------			public void hacerCapturasPaso(JComponent c,int numeroVista)	{		GestorOpciones gOpciones= new GestorOpciones();		final PanelVentana panelVentana=Ventana.thisventana.getPanelVentana();			if (Ventana.thisventana.getTraza()!=null)		{			OpcionFicherosRecientes ofr=(OpcionFicherosRecientes)gOpciones.getOpcion("OpcionFicherosRecientes",true);			OpcionTipoGrafico otg=(OpcionTipoGrafico)gOpciones.getOpcion("OpcionTipoGrafico",true);						String extensionesImagen[][]=otg.getExtensiones();						String definicionesArchivos[]=new String[3];			definicionesArchivos[0]=Texto.get("ARCHIVO_"+otg.getTipos(false)[0],Conf.idioma);			definicionesArchivos[1]=Texto.get("ARCHIVO_"+otg.getTipos(false)[1],Conf.idioma);			definicionesArchivos[2]=Texto.get("ARCHIVO_"+otg.getTipos(true)[0],Conf.idioma);						String ficheroSalida[]=new String[2];			ficheroSalida[0]=ofr.getDir();			ficheroSalida=SelecDireccion.cuadroAbrirFichero(								ficheroSalida[0],								Texto.get("CA_GUARDEXPORTMULTGIF",Conf.idioma),								null,								extensionesImagen,								definicionesArchivos,								0);											// *1* Comprobarmos que el fichero existe			// Actualizamos opción de formato gráfico empleado			if (ficheroSalida[1]!=null && ficheroSalida[1].contains("."))			{				otg.setTipoUsado(ficheroSalida[1].substring( ficheroSalida[1].lastIndexOf(".")+1, ficheroSalida[1].length()  ) );				gOpciones.setOpcion(otg,2);			}											if (ficheroSalida[1]!=null)			{				//int []tamPanel=panelVentana.dimPanelPrincipal();				//int []posicPanel=panelVentana.posicPanelPrincipal();				//int []tamPantalla=Conf.getTamanoMonitor();				/*final int getX=posicPanel[0];				final int getY=posicPanel[1];				final int getW=tamPanel[0];				final int getH=tamPanel[1];				final int tp0= tamPantalla[0];				final int tp1= tamPantalla[1];*/							// Si no tiene extensión, se la ponemos				if (!ficheroSalida[1].toLowerCase().contains(".gif") &&					!ficheroSalida[1].toLowerCase().contains(".jpg") &&					!ficheroSalida[1].toLowerCase().contains(".jpeg") &&					!ficheroSalida[1].toLowerCase().contains(".png"))					ficheroSalida[1]=ficheroSalida[1]+".png";				// Actualizamos opción de ficheros recientes (para mantener último directorio)				ofr=(OpcionFicherosRecientes)gOpciones.getOpcion("OpcionFicherosRecientes",true);				ofr.setDir(ficheroSalida[0]);				gOpciones.setOpcion(ofr,2);								Ventana.thisventana.deshabilitarOpcionesVentana();						final String path=ficheroSalida[0]+ficheroSalida[1].substring(0,ficheroSalida[1].lastIndexOf("."));						final int numeroVistaF=numeroVista;				//final JComponent cf=c;				new Thread(){					public synchronized void run()					{						GestorTrazaExportacion gte=new GestorTrazaExportacion(numeroVistaF);						JGraph g=gte.grafoEstadoActual();						int [] dimGrafo=new int[2];						dimGrafo[0]=gte.getAncho();						dimGrafo[1]=gte.getAlto();									//Fotografo.guardarFoto(g,0,dimGrafo);						Fotografo.guardarFoto(g,0);												int numFotos=1;						int numFramesFinalizados=0;												//final Traza tAux=Ventana.thisventana.getTraza();						//final PanelVentana pvAux=panelVentana;																		int x=0;																		final JFrame jf=new JFrame();						final JPanel panel=new JPanel();						jf.setSize(10,10);						jf.setLocation(0,0);						jf.setResizable(false);												final int numEstados=Ventana.thisventana.getTraza().getNumNodos()*2;												final CuadroProgreso cp=new CuadroProgreso(Ventana.thisventana,								Texto.get("CP_ESPERE",Conf.idioma),								Texto.get("CP_PROCES",Conf.idioma),									0);												while (!gte.finalTraza())						{							if (x!=0)								gte.avanzarTraza();														//try {wait(300);} catch (java.lang.InterruptedException ie) {}							//g=(JGraph)panelVentana.getGrafoPorNombre(numeroVistaF);							g=gte.grafoEstadoActual();							g.repaint();							g.updateUI();							final JGraph gg=g;														new Thread()							{								public void run()								{									jf.setVisible(true);									panel.add(gg);									panel.updateUI();																		jf.setContentPane(panel);								}							}.start();																											try {wait(1000);} catch (java.lang.InterruptedException ie) {}							System.gc();							//Fotografo.guardarFoto(gg,numFotos);							Fotografo.guardarFoto(g,path,Fotografo.numFormato(path),numFotos);							numFotos++;																					final int xx=x;							new Thread()							{								public void run()								{									if (cp!=null)										cp.setValores(Texto.get("CP_PROCES",Conf.idioma),(int)((((float)xx+1.0)/(float)numEstados)*100.0));									//System.out.println("[ (xx/numEstados)*100 ] = [ ("+(xx+1)+"/"+numEstados+")*100 ] = "+((xx/numEstados)*100));								}							}.start();														if (Ventana.thisventana.getTraza().enteroVisible())								numFramesFinalizados++;							x++;													}						if (cp!=null)							cp.cerrar();												jf.setVisible(false);																		Ventana.thisventana.habilitarOpcionesVentana();						new CuadroInformacion(Ventana.thisventana,Texto.get("INFO_EXPCORRECTT",Conf.idioma),								Texto.get("INFO_EXPCORRECT",Conf.idioma),550,100);						/* * hasta aquí el código nuevo * */																																										/*																		if (Ventana.thisventana.getTraza()!=null)						{							Ventana.thisventana.getTraza().nadaVisible();						}						try {wait(550);} catch (java.lang.InterruptedException ie) {}												panelVentana.refrescarOpciones();												try {wait(220);} catch (java.lang.InterruptedException ie) {}									Fotografo.guardarFoto(cf,path,Fotografo.numFormato(path),0);												int numFotos=1;						int numFramesFinalizados=0;												final Traza tAux=Ventana.thisventana.getTraza();						final PanelVentana pvAux=panelVentana;												while (numFramesFinalizados!=1)						{							new Thread(){								public void run()								{									tAux.siguienteVisible();									pvAux.refrescarOpciones();								}							}.start();							try {wait(300);} catch (java.lang.InterruptedException ie) {}							Fotografo.guardarFoto(cf,path,Fotografo.numFormato(path),numFotos);							numFotos++;														if (Ventana.thisventana.getTraza().enteroVisible())								numFramesFinalizados++;						}												//Fotografo.crearGIFAnimado(numFotos,path);						Ventana.thisventana.habilitarOpcionesVentana();						new CuadroInformacion(Ventana.thisventana,Texto.get("INFO_EXPCORRECTT",Conf.idioma),							Texto.get("INFO_EXPCORRECT",Conf.idioma),550,100);*/					}				}.start();			}		}		else			new CuadroError(Ventana.thisventana,Texto.get("ERROR_VISU",Conf.idioma),Texto.get("ERROR_NOVISCAPT",Conf.idioma));	}			// --------------------------------			public void capturarAnimacionGIF(JComponent c,int numeroVista)	{		if (Ventana.thisventana.getTraza()!=null)		{			ofr=(OpcionFicherosRecientes)gOpciones.getOpcion("OpcionFicherosRecientes",true);							ficheroSalida=new String[2];			ficheroSalida[0]=ofr.getDir();			ficheroSalida=SelecDireccion.cuadroAbrirFichero(ficheroSalida[0],Texto.get("CA_GUARDEXPORTGIF",Conf.idioma),						null,"gif",Texto.get("ARCHIVO_GIF",Conf.idioma),0);									// *1* Comprobarmos que el fichero existe			File f=new File(ficheroSalida[0]+ficheroSalida[1]);			if (!f.exists())				capturarAnimacionGIF2(c,numeroVista);			else				new CuadroPreguntaSobreescribir (Ventana.thisventana,"A"+numeroVista,this,c);			}		else			new CuadroError(Ventana.thisventana,Texto.get("ERROR_VISU",Conf.idioma),Texto.get("ERROR_NOVISCAPT",Conf.idioma));	}			public void capturarAnimacionGIF2(JComponent c,int numeroVista)	{		if (ficheroSalida[1]!=null)		{			//int []tamPanel=dim;//panelVentana.dimPanelPrincipal();			//int []posicPanel=pos;//panelVentana.posicPanelPrincipal();			//int []tamPantalla=Conf.getTamanoMonitor();			/*final int getX=posicPanel[0];			final int getY=posicPanel[1];			final int getW=tamPanel[0];			final int getH=tamPanel[1];			final int tp0= tamPantalla[0];			final int tp1= tamPantalla[1];*/			//final JComponent cf=c; 					// Si no tiene extensión GIF, se la ponemos			if (!((ficheroSalida[1].charAt( ficheroSalida[1].length()-1)=='f' || 					ficheroSalida[1].charAt( ficheroSalida[1].length()-1)=='F') &&				(ficheroSalida[1].charAt( ficheroSalida[1].length()-2)=='i' || 					ficheroSalida[1].charAt( ficheroSalida[1].length()-2)=='I') &&				(ficheroSalida[1].charAt( ficheroSalida[1].length()-3)=='g' || 					ficheroSalida[1].charAt( ficheroSalida[1].length()-3)=='G') &&				(ficheroSalida[1].charAt( ficheroSalida[1].length()-4)=='.')))				ficheroSalida[1]=ficheroSalida[1]+".gif";				// Actualizamos opción de ficheros recientes (para mantener último directorio)			ofr=(OpcionFicherosRecientes)gOpciones.getOpcion("OpcionFicherosRecientes",true);			ofr.setDir(ficheroSalida[0]);			gOpciones.setOpcion(ofr,2);						Ventana.thisventana.deshabilitarOpcionesVentana();				final String path=ficheroSalida[0]+ficheroSalida[1];			final int numeroVistaF=numeroVista;				new Thread(){				public synchronized void run()				{					final boolean estabanArbolesColapsados=Conf.mostrarArbolColapsado;										Conf.mostrarArbolColapsado=false;															GestorTrazaExportacion gte=new GestorTrazaExportacion(numeroVistaF);					JGraph g=gte.grafoEstadoActual();					int [] dimGrafo=new int[2];					dimGrafo[0]=gte.getAncho();					dimGrafo[1]=gte.getAlto();							//Fotografo.guardarFoto(g,0,dimGrafo);					Fotografo.guardarFoto(g,0);										int numFotos=1;					int numFramesFinalizados=0;										//final Traza tAux=Ventana.thisventana.getTraza();					//final PanelVentana pvAux=panelVentana;															int x=0;															final JFrame jf=new JFrame();					final JPanel panel=new JPanel();					jf.setSize(10,10);					jf.setLocation(0,0);					jf.setResizable(false);										final int numEstados=Ventana.thisventana.getTraza().getNumNodos()*2;										final CuadroProgreso cp=new CuadroProgreso(Ventana.thisventana,							Texto.get("CP_ESPERE",Conf.idioma),							Texto.get("CP_PROCES",Conf.idioma),								0);										while (!gte.finalTraza())					{						if (x!=0)							gte.avanzarTraza();												//try {wait(300);} catch (java.lang.InterruptedException ie) {}						//g=(JGraph)panelVentana.getGrafoPorNombre(numeroVistaF);						g=gte.grafoEstadoActual();						g.repaint();						g.updateUI();						final JGraph gg=g;												new Thread()						{							public void run()							{								jf.setVisible(true);								panel.add(gg);								panel.updateUI();																jf.setContentPane(panel);							}						}.start();																							try {wait(1000);} catch (java.lang.InterruptedException ie) {}						System.gc();						//Fotografo.guardarFoto(gg,numFotos);						Fotografo.guardarFoto(g,numFotos);						numFotos++;																		final int xx=x;						new Thread()						{							public void run()							{								if (cp!=null)									cp.setValores(Texto.get("CP_PROCES",Conf.idioma),(int)((((float)xx+1.0)/(float)numEstados)*100.0));								//System.out.println("[ (xx/numEstados)*100 ] = [ ("+(xx+1)+"/"+numEstados+")*100 ] = "+((xx/numEstados)*100));							}						}.start();												if (Ventana.thisventana.getTraza().enteroVisible())							numFramesFinalizados++;						x++;											}					if (cp!=null)						cp.cerrar();										jf.setVisible(false);										Conf.mostrarArbolColapsado=estabanArbolesColapsados;										Fotografo.crearGIFAnimado(numFotos,path, gifPila);					gifPila = false;					Ventana.thisventana.habilitarOpcionesVentana();					new CuadroInformacion(Ventana.thisventana,Texto.get("INFO_EXPCORRECTT",Conf.idioma),						Texto.get("INFO_EXPCORRECT",Conf.idioma),550,100);				}			}.start();		}	}}